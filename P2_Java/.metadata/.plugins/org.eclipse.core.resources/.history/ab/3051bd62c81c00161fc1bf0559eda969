package ch.hearc.p2.game.weapon;

import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import org.newdawn.slick.Animation;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.Sound;

import ch.hearc.p2.game.enums.Facing;
import ch.hearc.p2.game.level.LevelObject;
import ch.hearc.p2.game.physics.AABoundingRect;
import ch.hearc.p2.game.projectile.Projectile;
import ch.hearc.p2.game.projectile.ProjectilePlayer;

public class Weapon extends LevelObject {

    private List<LevelObject> toAddList = new LinkedList<LevelObject>();
    protected Image arme;
    private int munition;
    private Image flash;
    private Facing way;
    private Facing playerFacing;
    private Sound tir;
    private Random random;

    public Weapon(float x, float y, int mun) throws SlickException {
	super(x, y);
	way = Facing.LEFT;
	playerFacing = Facing.RIGHT;
	munition = 1000; //remplacer par mun
	x_velocity = 0;
	y_velocity = 0;

	arme = new Image("ressources/map/tuiles/platformerGraphicsDeluxe_Updated/Tiles/raygunBig.png");
	flash = new Image("ressources/flash00.png");
	
	boundingShape = new AABoundingRect(x, y, 0, 0);
	maximumFallSpeed = (float) 0;
	tir = new Sound("ressources/laser4.ogg");
	random = new Random();
    }

    public void render(float offset_x, float offset_y) {
	if (playerFacing == Facing.RIGHT)
	    arme.draw(x - 2 - offset_x, y - 2 - offset_y);
	else {
	    arme.getFlippedCopy(true, false).draw(x - 110 - offset_x, y - 2 - offset_y);
	}
	flash.draw(x - 2 - offset_x, y - 2 - offset_y);

    }

    public void shoot(float playerX, float playerY, int mouseX, int mouseY) throws SlickException {
	if (munition > 0) {
	    // Calcul de la vélocité X et Y
	    float velocityX = (float) 3.3;
	    float velocityY = (float) 3.3;
	    double angle = Math.atan(Math.abs(mouseY - playerY) / Math.abs(mouseX - playerX));
	    float angleProj = (float) angle;
	    velocityY *= angle;

	    if (mouseX - playerX < 0) // Clique à gauche du joueur
	    {
		if (mouseY - playerY < 0) // Clique en dessous du joueur
		{
		    velocityY *= -1;

		} else // Clique en dessus du joueur
		{

		}
		velocityX *= -1;

		way = Facing.LEFT;
	    } else // Clique à droite du joueur
	    {
		if (mouseY - playerY < 0) // Clique en dessous du joueur
		{
		    velocityY *= -1;
		} else // Clique en dessus du joueur
		{

		}
		way = Facing.RIGHT;
		angleProj *= -1;

	    }
	    if (way == Facing.RIGHT)
		toAddList.add(new ProjectilePlayer(x + 10, y, velocityX, velocityY, (float)(angleProj + Math.toRadians(random.nextInt(15)))));
	    else
		toAddList.add(new ProjectilePlayer(x - 110, y, velocityX, velocityY, (float)(angleProj + Math.toRadians(random.nextInt(15)))));
	    munition--;
	    
	    tir.play();
	    
	}
    }

    public List<LevelObject> getToAddList() {
	return toAddList;
    }

    public void clearList() {
	toAddList.clear();
    }

    public int getMunition() {
	return munition;
    }

    public Facing getWay() {
	return way;
    }

    public void setPlayerFacing(Facing facing) {
	playerFacing = facing;
    }

}
