package ch.hearc.p2.game.character;

import java.util.LinkedList;
import java.util.List;

import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

import ch.hearc.p2.game.level.LevelObject;
import ch.hearc.p2.game.physics.AABoundingRect;
import ch.hearc.p2.game.projectile.Projectile;
import ch.hearc.p2.game.projectile.ProjectileAbeille;

public class Abeille extends Ennemie {

    private boolean dead;
    private Image deadPicture;

    public Abeille(float x, float y) throws SlickException {

	super(x, y);
	dead = false;
	// setSprite(new Image("ressources/sprites/p2_walk01.png"));

	setSprite(new Image("ressources/map/tuiles/platformer-pack-redux-360-assets/PNG/Enemies/bee.png"));
	setMovingAnimation(
		new Image[] { new Image("ressources/map/tuiles/platformer-pack-redux-360-assets/PNG/Enemies/bee.png"),
			new Image("ressources/map/tuiles/platformer-pack-redux-360-assets/PNG/Enemies/bee_move.png") },
		80);

	boundingShape = new AABoundingRect(x, y, 100, 100);
	deadPicture = new Image("ressources/bee_dead");
	accelerationSpeed = 0.002f;
	maximumSpeed = 0.55f;
	maximumFallSpeed = 0.0f;
	decelerationSpeed = 0.001f;
	life = 6;
    }

    public void updateBoundingShape() {
	boundingShape.updatePosition(x + 20, y);
    }

    public void shoot() throws SlickException {
	int randomX = -5 + (int) (Math.random() * 5);
	int randomY = 0 + (int) (Math.random() * 5);

	toAddList.add(new ProjectileAbeille(x + 10, y + 10, randomX, randomY));
    }

    public void moveRandom() {
	int randomNum = 0 + (int) (Math.random() * 50);
	int randomWay = 0 + (int) (Math.random() * 2);
	if (randomWay < 1) {
	    moveLeft(randomNum);
	    // this.y += randomNum;
	} else {
	    moveRight(randomNum);
	    // this.y -= randomNum;
	}

    }

    public void setMaximumFallSpeed(float maximumFallSpeed) {
	this.maximumFallSpeed = maximumFallSpeed;
    }

    public void dead(Boolean b) {
	this.dead = true;
    }

    public Boolean isDead() {
	return dead;
    }

    public void render(int offset_x, int offset_y) {

	// draw a moving animation if we have one and we moved within the last
	// 150 miliseconds
	if (dead == false) {
	    if (movingAnimations != null && moving) {
		movingAnimations.get(facing).draw(x - 2 - offset_x, y - 2 - offset_y);
	    } else {
		sprites.get(facing).draw(x - 2 - offset_x, y - 2 - offset_y);
	    }
	}
	else
	    deadPicture.draw(x - 2 - offset_x, y - 2 - offset_y);
	    
    }

}