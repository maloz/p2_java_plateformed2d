package ch.hearc.p2.game.character;

import java.util.HashMap;

import org.newdawn.slick.Animation;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

import ch.hearc.p2.game.enums.Facing;
import ch.hearc.p2.game.level.LevelObject;

public abstract class Character extends LevelObject {

	protected HashMap<Facing, Image> sprites;

	protected HashMap<Facing, Animation> movingAnimations;
	protected Facing facing;
	protected boolean moving = false;
	protected float accelerationSpeed = 1;
	protected float decelerationSpeed = 1;
	protected float maximumSpeed = 1;

	public Character(float x, float y) throws SlickException {
		super(x, y);
		// in case we forget to set the image, we don't want the game to crash,
		// but it still has to be obvious that something was forgotten
		setSprite(new Image("dataTuto/img/placeholder_sprite.png"));

		// default direction will be right
		facing = Facing.RIGHT;
	}

	protected void setMovingAnimation(Image[] images, int frameDuration) {
		movingAnimations = new HashMap<Facing, Animation>();

		// we can just put the right facing in with the default images
		movingAnimations.put(Facing.RIGHT, new Animation(images, frameDuration));

		Animation facingLeftAnimation = new Animation();
		for (Image i : images) {
			facingLeftAnimation.addFrame(i.getFlippedCopy(true, false), frameDuration);
		}
		movingAnimations.put(Facing.LEFT, facingLeftAnimation);

	}

	protected void setSprite(Image i) {
		sprites = new HashMap<Facing, Image>();
		sprites.put(Facing.RIGHT, i);
		sprites.put(Facing.LEFT, i.getFlippedCopy(true, false));
	}

	public boolean isMoving() {
		return moving;
	}

	public void setMoving(boolean b) {
		moving = b;
	}

	// move towards x_velocity = 0
	public void decelerate(int delta) {
		if (x_velocity > 0) {
			x_velocity -= decelerationSpeed * delta;
			if (x_velocity < 0)
				x_velocity = 0;
		} else if (x_velocity < 0) {
			x_velocity += decelerationSpeed * delta;
			if (x_velocity > 0)
				x_velocity = 0;
		}
	}

	public void jump() {
		if (onGround)
			y_velocity = -0.4f;
	}

	public void moveLeft(int delta) {
		// if we aren't already moving at maximum speed
		if (x_velocity > -maximumSpeed) {
			// accelerate
			x_velocity -= accelerationSpeed * delta;
			if (x_velocity < -maximumSpeed) {
				// and if we exceed maximum speed, set it to maximum speed
				x_velocity = -maximumSpeed;
			}
		}
		moving = true;
		facing = Facing.LEFT;
	}

	public void moveRight(int delta) {
		if (x_velocity < maximumSpeed) {
			x_velocity += accelerationSpeed * delta;
			if (x_velocity > maximumSpeed) {
				x_velocity = maximumSpeed;
			}
		}
		moving = true;
		facing = Facing.RIGHT;
	}

	public void render() {

		// draw a moving animation if we have one and we moved within the last
		// 150 miliseconds
		if (movingAnimations != null && moving) {
			movingAnimations.get(facing).draw(x - 2, y - 2);
		} else {
			sprites.get(facing).draw(x - 2, y - 2);
		}
	}

}